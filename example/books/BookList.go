// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package books

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BookListT struct {
	Children []*BookT `json:"children"`
}

func (t *BookListT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	childrenOffset := flatbuffers.UOffsetT(0)
	if t.Children != nil {
		childrenLength := len(t.Children)
		childrenOffsets := make([]flatbuffers.UOffsetT, childrenLength)
		for j := 0; j < childrenLength; j++ {
			childrenOffsets[j] = t.Children[j].Pack(builder)
		}
		BookListStartChildrenVector(builder, childrenLength)
		for j := childrenLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(childrenOffsets[j])
		}
		childrenOffset = builder.EndVector(childrenLength)
	}
	BookListStart(builder)
	BookListAddChildren(builder, childrenOffset)
	return BookListEnd(builder)
}

func (rcv *BookList) UnPackTo(t *BookListT) {
	childrenLength := rcv.ChildrenLength()
	t.Children = make([]*BookT, childrenLength)
	for j := 0; j < childrenLength; j++ {
		x := Book{}
		rcv.Children(&x, j)
		t.Children[j] = x.UnPack()
	}
}

func (rcv *BookList) UnPack() *BookListT {
	if rcv == nil {
		return nil
	}
	t := &BookListT{}
	rcv.UnPackTo(t)
	return t
}

type BookList struct {
	_tab flatbuffers.Table
}

func GetRootAsBookList(buf []byte, offset flatbuffers.UOffsetT) *BookList {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BookList{}
	x.Init(buf, n+offset)
	return x
}

func FinishBookListBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsBookList(buf []byte, offset flatbuffers.UOffsetT) *BookList {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &BookList{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedBookListBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *BookList) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BookList) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *BookList) Children(obj *Book, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *BookList) ChildrenLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func BookListStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func BookListAddChildren(builder *flatbuffers.Builder, children flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(children), 0)
}
func BookListStartChildrenVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func BookListEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
