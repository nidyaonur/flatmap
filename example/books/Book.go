// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package books

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BookT struct {
	Id uint64 `json:"id"`
	Title string `json:"title"`
	PageCount uint64 `json:"page_count"`
	Rate float64 `json:"rate"`
	ListField []string `json:"list_field"`
	ScalarListField []uint64 `json:"scalar_list_field"`
}

func (t *BookT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	titleOffset := flatbuffers.UOffsetT(0)
	if t.Title != "" {
		titleOffset = builder.CreateSharedString(t.Title)
	}
	listFieldOffset := flatbuffers.UOffsetT(0)
	if t.ListField != nil {
		listFieldLength := len(t.ListField)
		listFieldOffsets := make([]flatbuffers.UOffsetT, listFieldLength)
		for j := 0; j < listFieldLength; j++ {
			listFieldOffsets[j] = builder.CreateSharedString(t.ListField[j])
		}
		BookStartListFieldVector(builder, listFieldLength)
		for j := listFieldLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(listFieldOffsets[j])
		}
		listFieldOffset = builder.EndVector(listFieldLength)
	}
	scalarListFieldOffset := flatbuffers.UOffsetT(0)
	if t.ScalarListField != nil {
		scalarListFieldLength := len(t.ScalarListField)
		BookStartScalarListFieldVector(builder, scalarListFieldLength)
		for j := scalarListFieldLength - 1; j >= 0; j-- {
			builder.PrependUint64(t.ScalarListField[j])
		}
		scalarListFieldOffset = builder.EndVector(scalarListFieldLength)
	}
	BookStart(builder)
	BookAddId(builder, t.Id)
	BookAddTitle(builder, titleOffset)
	BookAddPageCount(builder, t.PageCount)
	BookAddRate(builder, t.Rate)
	BookAddListField(builder, listFieldOffset)
	BookAddScalarListField(builder, scalarListFieldOffset)
	return BookEnd(builder)
}

func (rcv *Book) UnPackTo(t *BookT) {
	t.Id = rcv.Id()
	t.Title = string(rcv.Title())
	t.PageCount = rcv.PageCount()
	t.Rate = rcv.Rate()
	listFieldLength := rcv.ListFieldLength()
	t.ListField = make([]string, listFieldLength)
	for j := 0; j < listFieldLength; j++ {
		t.ListField[j] = string(rcv.ListField(j))
	}
	scalarListFieldLength := rcv.ScalarListFieldLength()
	t.ScalarListField = make([]uint64, scalarListFieldLength)
	for j := 0; j < scalarListFieldLength; j++ {
		t.ScalarListField[j] = rcv.ScalarListField(j)
	}
}

func (rcv *Book) UnPack() *BookT {
	if rcv == nil {
		return nil
	}
	t := &BookT{}
	rcv.UnPackTo(t)
	return t
}

type Book struct {
	_tab flatbuffers.Table
}

func GetRootAsBook(buf []byte, offset flatbuffers.UOffsetT) *Book {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Book{}
	x.Init(buf, n+offset)
	return x
}

func FinishBookBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsBook(buf []byte, offset flatbuffers.UOffsetT) *Book {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Book{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedBookBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Book) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Book) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Book) Id() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Book) MutateId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *Book) Title() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Book) PageCount() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Book) MutatePageCount(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func (rcv *Book) Rate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Book) MutateRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

func (rcv *Book) ListField(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Book) ListFieldLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Book) ScalarListField(j int) uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *Book) ScalarListFieldLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Book) MutateScalarListField(j int, n uint64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func BookStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func BookAddId(builder *flatbuffers.Builder, id uint64) {
	builder.PrependUint64Slot(0, id, 0)
}
func BookAddTitle(builder *flatbuffers.Builder, title flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(title), 0)
}
func BookAddPageCount(builder *flatbuffers.Builder, pageCount uint64) {
	builder.PrependUint64Slot(2, pageCount, 0)
}
func BookAddRate(builder *flatbuffers.Builder, rate float64) {
	builder.PrependFloat64Slot(3, rate, 0.0)
}
func BookAddListField(builder *flatbuffers.Builder, listField flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(listField), 0)
}
func BookStartListFieldVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func BookAddScalarListField(builder *flatbuffers.Builder, scalarListField flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(scalarListField), 0)
}
func BookStartScalarListFieldVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func BookEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
