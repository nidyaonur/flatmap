package parser

import (
	"fmt"
	"strings"
)

func GenerateGoFile(tables []Table, enumSet map[string]bool, enumConfMap map[string]Enum, packageName string) string {
	var sb strings.Builder
	sb.WriteString("// Code generated by fbs-parser; DO NOT EDIT.\n")
	sb.WriteString(fmt.Sprintf("package %s\n\n", packageName))

	if len(enumSet) > 0 {
		sb.WriteString("import (\n")
		sb.WriteString("  \"fmt\"\n\n")
		sb.WriteString("  \"github.com/nidyaonur/flatmap/pkg/flatmap\"\n\n")
		sb.WriteString(")\n")
	}

	// Start our top-level map
	sb.WriteString("var Tables = map[string][]map[string]string{\n")

	for _, tbl := range tables {
		sb.WriteString(fmt.Sprintf("  %q: {\n", tbl.Name))

		for _, f := range tbl.Fields {
			// Join metadata with comma delimiter (or any other you prefer)
			metaJoined := strings.Join(f.Meta, ",")

			// Map FBS type to Go type
			goType, isEnum := fbTypeToGoType(f.Type, enumSet)

			// Build the map literal
			sb.WriteString("    {\n")
			sb.WriteString(fmt.Sprintf("      \"name\": %q,\n", f.Name))
			// sb.WriteString(fmt.Sprintf("      \"fbtype\": %q,\n", f.Type))
			sb.WriteString(fmt.Sprintf("      \"type\": %q,\n", goType))
			sb.WriteString(fmt.Sprintf("      \"defaultValue\": %q,\n", f.DefaultValue))
			sb.WriteString(fmt.Sprintf("      \"meta\": %q,\n", metaJoined))
			if isEnum {
				sb.WriteString(fmt.Sprintf("      \"enumName\": %q,\n", f.Type))
			}
			sb.WriteString("    },\n")
		}
		sb.WriteString("  },\n")
	}

	sb.WriteString("}\n")

	// Generate enumByteGetter function correctly if enums exist.
	if len(enumSet) > 0 {
		sb.WriteString("func EnumByteGetter[V flatmap.VType](enumName string, getter interface{}) (func(V) byte, error) {\n")
		sb.WriteString("  switch enumName {\n")
		for enumName := range enumSet {
			sb.WriteString(fmt.Sprintf("  case %q:\n", enumName))
			sb.WriteString(fmt.Sprintf("    if g, ok := getter.(func(V) %s); ok {\n", enumName))
			sb.WriteString("      return func(v V) byte { return byte(g(v)) }, nil\n")
			sb.WriteString("    }\n")
			sb.WriteString(fmt.Sprintf("    return nil, fmt.Errorf(\"unable to assert getter to func(V) %s for enum %%s\", enumName)\n", enumName))
		}
		sb.WriteString("  default:\n")
		sb.WriteString("    return nil, fmt.Errorf(\"unsupported enum type: %s\", enumName)\n")
		sb.WriteString("  }\n")
		sb.WriteString("}\n")
	}

	// Generate Initializer functions in below format
	// func Init{TableName}(v *{TableName}) *{TableName} {
	// 	if v == nil {
	// 		v = &{TableName}{}
	// 	}
	// 	return v
	// }

	return sb.String()
}
