// Code generated by fbs-parser; DO NOT EDIT.
package books

import (
  "fmt"

  "github.com/nidyaonur/flatmap/pkg/flatmap"

)
var Tables = map[string][]map[string]string{
  "Creative": {
    {
      "name": "Id",
      "type": "uint64",
      "defaultValue": "",
      "meta": "",
    },
    {
      "name": "Name",
      "type": "string",
      "defaultValue": "",
      "meta": "",
    },
    {
      "name": "CampaignId",
      "type": "uint64",
      "defaultValue": "",
      "meta": "",
    },
    {
      "name": "Rate",
      "type": "float64",
      "defaultValue": "",
      "meta": "",
    },
    {
      "name": "ListField",
      "type": "[]string",
      "defaultValue": "",
      "meta": "",
    },
    {
      "name": "ScalarListField",
      "type": "[]uint64",
      "defaultValue": "",
      "meta": "",
    },
  },
  "CreativeList": {
    {
      "name": "Children",
      "type": "[]Creative",
      "defaultValue": "",
      "meta": "",
    },
  },
  "Book": {
    {
      "name": "Id",
      "type": "uint64",
      "defaultValue": "",
      "meta": "",
    },
    {
      "name": "Title",
      "type": "string",
      "defaultValue": "",
      "meta": "",
    },
    {
      "name": "PageCount",
      "type": "uint64",
      "defaultValue": "",
      "meta": "",
    },
    {
      "name": "Rate",
      "type": "float64",
      "defaultValue": "",
      "meta": "",
    },
    {
      "name": "ListField",
      "type": "[]string",
      "defaultValue": "",
      "meta": "",
    },
    {
      "name": "ScalarListField",
      "type": "[]uint64",
      "defaultValue": "",
      "meta": "",
    },
    {
      "name": "AdType",
      "type": "byte",
      "defaultValue": "",
      "meta": "",
      "enumName": "AdType",
    },
  },
  "BookList": {
    {
      "name": "Children",
      "type": "[]Book",
      "defaultValue": "",
      "meta": "",
    },
  },
}
func EnumByteGetter[V flatmap.VType](enumName string, getter interface{}) (func(V) byte, error) {
  switch enumName {
  case "Color":
    if g, ok := getter.(func(V) Color); ok {
      return func(v V) byte { return byte(g(v)) }, nil
    }
    return nil, fmt.Errorf("unable to assert getter to func(V) Color for enum %s", enumName)
  case "Status":
    if g, ok := getter.(func(V) Status); ok {
      return func(v V) byte { return byte(g(v)) }, nil
    }
    return nil, fmt.Errorf("unable to assert getter to func(V) Status for enum %s", enumName)
  case "AdType":
    if g, ok := getter.(func(V) AdType); ok {
      return func(v V) byte { return byte(g(v)) }, nil
    }
    return nil, fmt.Errorf("unable to assert getter to func(V) AdType for enum %s", enumName)
  default:
    return nil, fmt.Errorf("unsupported enum type: %s", enumName)
  }
}
